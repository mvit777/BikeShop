@using BikeDistributor.Domain.Models;
@using BikeDistributor.Domain.Entities;
@using BikeDistributor.Infrastructure.core;
@using BikeDistributor.Infrastructure.interfaces;
@using BikeShop.BlazorComponents.Components;
@using AKSoftware.Blazor.Utilities;
@using BikeShop.Helpers;
@using BikeShop.Services;
@using System.Text;
@using Newtonsoft.Json;

@*@using BikeShop.Protos;
    @using Google.Protobuf.WellKnownTypes;
    @using AutoMapper;*@

@inject HttpClient RestClient;
@inject IJSRuntime JSRuntime;
@inject BikeShopUserService UserService;
@*@inject Bikes.BikesClient bc;
    @inject IMapper m;*@

<div aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Admin</li>
        <li class="breadcrumb-item active" aria-current="page">Bikes</li>
    </ol>
</div>
<div>



    <!--ecce homo <span>@url</span>-->@*<span>@Configuration.GetSection("BikeShopWS").GetValue("baseUrl", "")</span>*@
    <span>@responseContent</span>
</div>

@if (EntityBikes == null)
{
    <Spinner />

}
else
{
    <Button HTMLId="btnNewBike" HTMLCssClass="btn-primary float-right" Icon="oi oi-plus" Label="ADD NEW" ClickEventName="BikeList_addBikeItemClick" />
    <div style="clear:both;"></div>
    <br />
    <Alert HTMLId="MainAlert" @ref="MainAlert">
        @message
        @if (showConfirmButton)
        {
            <Button HTMLId="btnConfirmDelete" HTMLCssClass="btn-primary float-right" Icon="oi oi-thumb-up" Label="Delete It!" ClickEventName="BikeList_OnDeleteConfirmed" />
            <br />
        }
    </Alert>
    <div style="clear:both"></div>
    <HtmlTable Items="EntityBikes" Context="EntityBike" HTMLId="BikeList" @ref="BikeList">
        <HeaderTemplate>
            <th>Model</th>
            <th>Brand</th>
            <th>Type</th>
            <th>Tot. Price</th>
            <th>&nbsp;</th>
        </HeaderTemplate>
        <RowTemplate>
            <td>@EntityBike.Bike.Model</td>
            <td>@EntityBike.Bike.Brand</td>
            <td>
                @(EntityBike.Bike.isStandard ? "Standard" : "Custom")
                @if (EntityBike.IsStandard == false)
                {
                    <Button HTMLId="@(EntityBike.Id.Replace(" ","_") + "_addOptionsButton")" Icon="oi oi-plus" HTMLCssClass="btn-success btn-sm float-right" Label="ADD OPTIONS" ClickEventName="BikeList_addOptionsIemClick" />
                }
            </td>
            <td>@EntityBike.TotalPrice</td>
            <td>
                <Button HTMLId="@(EntityBike.Id.Replace(" ","_") + "_editButton")" HTMLCssClass="btn-primary btn-sm" Icon="oi oi-pencil" Label="EDIT" ClickEventName="BikeList_editItemClick" />
                <Button HTMLId="@(EntityBike.Id.Replace(" ","_") + "_deleteButton")" HTMLCssClass="btn-danger btn-sm" Icon="oi oi-trash" Label="DELETE" ClickEventName="BikeList_deleteItemClick" />

            </td>
        </RowTemplate>
    </HtmlTable>
    <!-- temp-->
    <!-- HIDDEN MODALS -->
    <Modal HTMLId="EditBikeModal" HeaderTitle="EDIT" HTMLCssClass="modal-md" ShowFooter="false">
        <HeaderTemplate>
            <h5 class="modal-title" id="editBikeModalH5"><span class="oi oi-pencil"></span> Editing Bike... @selectedId</h5>
            <span class="rounded-circle  light-purple-bg" style="background-color: white;">
                <button type="button" class="close" @onclick="CloseEditBikeModal" data-dismiss="modal" aria-label="Close" style="margin-right: -2px;">
                    <span aria-hidden="true">&times;</span>
                </button>
            </span>
        </HeaderTemplate>
        <ChildContent>
            <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmit" class="row p-3">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="col-md-6 mb-3">
                    <label for="Model">Model</label>
                    <InputText id="Model" @bind-Value="ProductModel.Model" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="BasePrice">Price</label>
                    <InputNumber id="BasePrice" @bind-Value="ProductModel.BasePrice" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="Brand">Brand</label>
                    <InputText id="Brand" @bind-Value="ProductModel.Brand" class="form-control" />
                </div>
                <div class="col-md-12 mb-3">
                    <label for="Description">Description</label>
                    <InputTextArea id="Description" @bind-Value="ProductModel.Description" class="form-control" />
                </div>
                <div class="col-12 mb-3">
                    <div class="form-check">
                        <InputCheckbox id="IsStandard" @bind-Value="ProductModel.isStandard" class="form-check-input" />
                        <label class="form-check-label" for="IsStandard">
                            Standard
                        </label>
                    </div>
                </div>
                <div class="col-12 mb-3">
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </EditForm>
        </ChildContent>
        @*<FooterTemplate>
                here save and close buttons
            </FooterTemplate>*@
    </Modal>
    <Modal HTMLId="EditOptionsModal" HTMLCssClass="modal-xl" HeaderTitle="Bike Options" >
        <HeaderTemplate>
            <h5 class="modal-title" id="editBikeModalH5"><span class="oi oi-wrench"></span> Options for Bike... @selectedId</h5>
            <span class="rounded-circle  light-purple-bg" style="background-color: white;">
                <button type="button" class="close" @onclick="CloseEditBikeModal" data-dismiss="modal" aria-label="Close" style="margin-right: -2px;">
                    <span aria-hidden="true">&times;</span>
                </button>
            </span>
        </HeaderTemplate>
        <ChildContent>
            qui edit options manager
        </ChildContent>
        <FooterTemplate>
                here save and close buttons
            </FooterTemplate>
    </Modal>
}
@code {
    private List<MongoEntityBike> EntityBikes;
    private string selectedId = "";
    private string deletableObjId;
    private string responseContent;
    private string message;
    //private ElementReference MainAlert;
    private Alert MainAlert;
    private GenericBike ProductModel;
    private EditContext EditContext;
    private BikeShopUserInfo CurrentUser;//always check if not null in the razor html
    private bool showConfirmButton = false;
    private HtmlTable<MongoEntityBike> BikeList;
    private string currentModal = "";
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    #region "Form handlers"
    /// <summary>
    /// Save Item
    /// </summary>
    /// <returns></returns>
    private async Task HandleSubmit()
    {
        //Console.WriteLine("HandleSubmit Called...");

        if (EditContext.Validate())
        {
            //Console.WriteLine("Form is Valid...");
            var MongoEntity = EntityBikes.AsQueryable<MongoEntityBike>().Where(x => x.Id == selectedId).SingleOrDefault();
            if (MongoEntity != null)
            {
                //insert
            }
            else
            {
                var bike = JsonConvert.SerializeObject(ProductModel);
                //var data = new StringContent(bike, Encoding.UTF8, "application/json");
                await RestClient.PostAsync("/Bikes/create?bike=" + bike, null);
                CloseEditBikeModal();
                await Layout.PopulateMainToastAsync("Operation result", "bike inserted!", "alert-success", "oi oi-circle-check");
                //responseContent = " HandleSubmit called";
                await GetBikesAsync(true);
                //StateHasChanged();
            }
            selectedId = "";
        }

    }
    #endregion
    #region "Components handlers"
    /// <summary>
    ///
    /// </summary>
    public void SubscribeToEditOptionPanel()
    {
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_addOptionsIemClick", (sender, value) =>
        {
            selectedId = StringHelper.NormaliseStringId(value, "_addOptionsButton");
            currentModal = "#EditOptionsModal";
            JSRuntime.InvokeVoidAsync("bootstrapNS.ToggleModal", currentModal, "show");
            StateHasChanged();
        });
    }
    public void CloseEditBikeModal()
    {
        JSRuntime.InvokeVoidAsync("bootstrapNS.ToggleModal", currentModal, "hide");//make 2nd params dynamic
        MainAlert.ChangeVisible(false);
        currentModal = "";
    }
    /// <summary>   
    ///
    /// </summary>
    public void SubscribeToOnDeleteConfirmed()
    {
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_OnDeleteConfirmed", (sender, value) =>
        {
            message = $"I deleted item {deletableObjId}";
        //MainAlert.ChangeVisible(false);
        MainAlert.ChangeCssClass("alert-success");
            showConfirmButton = false;
            deletableObjId = null;
            StateHasChanged();
        });
    }

    /// <summary>
    ///
    /// </summary>
    public void SubscribeToDeleteItemClick()
    {
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_deleteItemClick", (sender, value) =>
        {
            // Do actions against the value
            // If the value is updating the component make sure to call StateHasChanged
            message = $"Please confirm you want to delete item {value}";
            MainAlert.ChangeCssClass("alert-danger");
            showConfirmButton = true;
            MainAlert.ChangeVisible(true);
            deletableObjId = value;

            StateHasChanged();
        });
    }
    /// <summary>
    /// Opens edit item modal passing selected item
    /// </summary>
    public void SubscribeToEditItemClick()
    {
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_editItemClick", (sender, value) =>
        {
            // Do actions against the value
            selectedId = StringHelper.NormaliseStringId(value, "_editButton");
            // If the value is updating the component make sure to call StateHasChanged
            message = $"You are editing {selectedId}";
            MainAlert.ChangeCssClass("alert-primary");
            MainAlert.ChangeVisible(true);
            var MongoEntity = EntityBikes.AsQueryable<MongoEntityBike>().Where(x => x.Id == selectedId).SingleOrDefault();
            if (MongoEntity.Bike.isStandard)
            {
                var bike = (Bike)MongoEntity.Bike;
                ProductModel = JsonUtils.Convert<Bike, GenericBike>(bike);
            }
            else
            {
                var bike = (BikeVariant)MongoEntity.Bike;
                ProductModel = JsonUtils.Convert<BikeVariant, GenericBike>(bike);
            }

            currentModal = "#EditBikeModal";
            JSRuntime.InvokeVoidAsync("bootstrapNS.ToggleModal", currentModal, "show");

            StateHasChanged();
        });
    }
    /// <summary>
    /// Opens Add item Modal
    /// </summary>
    public void SubscribeToNewItemClick()
    {
        //BikeList_addBikeIemClick
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_addBikeItemClick", (sender, value) =>
        {
            ProductModel = new GenericBike();
            EditContext = new EditContext(ProductModel);

            currentModal = "#EditBikeModal";
            JSRuntime.InvokeVoidAsync("bootstrapNS.ToggleModal", currentModal, "show");
            selectedId = "";
            StateHasChanged();
        });
    }
    #endregion
    #region "Data Handlers"
    private async Task GetBikesAsync(bool refreshTable = false)
    {
        ProductModel = new GenericBike();
        EditContext = new EditContext(ProductModel);
        //url = Configuration.GetSection("BikeShopWS").GetValue("baseUrl", "");
        try
        {
            var jsonResponse = await RestClient.GetStringAsync("/Bikes");
            EntityBikes = JsonUtils.DeserializeMongoEntityBikeList(jsonResponse);
            //var response = await bc.GetBikesAsync(new Google.Protobuf.WellKnownTypes.Empty());
            //EntityBikes = m.Map<List<MongoEntityBike>>(response.BikeEntities.AsEnumerable());
            if (refreshTable)
            {
                responseContent += " bikes found " + EntityBikes.Count.ToString();
                BikeList.RefreshComponent(EntityBikes);
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            responseContent = ex.Message + " " + ex.InnerException + ex.StackTrace;
        }

    }
    #endregion
    #region "Page handlers"
    protected override async Task OnInitializedAsync()
    {

        await GetBikesAsync();
        CurrentUser = UserService.GetCurrentUser();
        SubscribeToEditItemClick();
        SubscribeToDeleteItemClick();
        SubscribeToNewItemClick();
        SubscribeToEditOptionPanel();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        await JSRuntime.InvokeVoidAsync("bootstrapNS.JSDataTable", "#BikeList", new object[] { });
    }
    #endregion
}
