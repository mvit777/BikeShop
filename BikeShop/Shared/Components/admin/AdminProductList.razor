@using BikeDistributor.Domain.Models;
@using BikeDistributor.Domain.Entities;
@using BikeDistributor.Infrastructure.core;
@using BikeShop.BlazorComponents.Components;
@using AKSoftware.Blazor.Utilities;

@inject HttpClient RestClient;
@inject IJSRuntime JSRuntime;

<div aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Admin</li>
        <li class="breadcrumb-item active" aria-current="page">Bikes</li>
    </ol>
</div>
<div>

    <!--ecce homo <span>@url</span>-->@*<span>@Configuration.GetSection("BikeShopWS").GetValue("baseUrl", "")</span>*@
    <span>@responseContent</span>
</div>

@if (EntityBikes == null)
{
<Spinner />    
}
else
{
     <Button HTMLId="btnNewBike" HTMLCssClass="btn-primary float-right" Icon="oi oi-plus" Label="ADD NEW" ClickEventName="BikeList_addBikeIemClick" />
     <div style="clear:both;"></div>
     <br />
     <Alert HTMLId="MainAlert" @ref="MainAlert">
        @message
    </Alert>
    <div style="clear:both"></div>
     <HtmlTable Items="EntityBikes" Context="EntityBike" HTMLId="BikeList">
        <HeaderTemplate>
            <th>Model</th>
            <th>Brand</th>
            <th>Type</th>
            <th>Tot. Price</th>
            <th>&nbsp;</th>
        </HeaderTemplate>
        <RowTemplate>
            <td>@EntityBike.Bike.Model</td>
            <td>@EntityBike.Bike.Brand</td>
            <td>
                @(EntityBike.Bike.isStandard ? "Standard" : "Custom")
                @if (EntityBike.IsStandard == false)
                    {
                    <Button HTMLId="@(EntityBike.Id.Replace(" ","_") + "_addOptionsButton")" Icon="oi oi-plus" HTMLCssClass="btn-success btn-sm float-right" Label="ADD OPTIONS" ClickEventName="BikeList_addOptionsIemClick" />
                    }
            </td>
            <td>@EntityBike.TotalPrice</td>
            <td>
                <Button HTMLId="@(EntityBike.Id.Replace(" ","_") + "_editButton")" HTMLCssClass="btn-primary btn-sm" Label="EDIT" ClickEventName="BikeList_editIemClick" />
                <Button HTMLId="@(EntityBike.Id.Replace(" ","_") + "_deleteButton")" HTMLCssClass="btn-danger btn-sm" Label="DELETE" ClickEventName="BikeList_deleteItemClick" />

            </td>
        </RowTemplate>
    </HtmlTable>
    <Modal HTMLId="EditBikeModal" ShowHeader="true" HeaderTitle="EDIT" HTMLCssClass="modal-xl">
        <ChildContent>
            Tanto va la gatta al lardo
        </ChildContent>
    </Modal>
}
@code {
    private List<MongoEntityBike> EntityBikes;
    //private string url;
    private string responseContent;
    private string message;
    //private ElementReference MainAlert;
    private Alert MainAlert;

    public void SubscribeToModalClosing()
    {
        MessagingCenter.Subscribe<Button, string>(this, "ModalClosing", (sender, value) =>
        {
            JSRuntime.InvokeVoidAsync("bootstrapNS.ToggleModal", value, "hide");
            MainAlert.ChangeVisible(false);
            StateHasChanged();
        });
    }

    public void SubscribeToDeleteItemClick()
    {
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_deleteItemClick", (sender, value) =>
        {
            // Do actions against the value
            // If the value is updating the component make sure to call StateHasChanged
            message = $"Please confirm you want to delete item {value}";
            MainAlert.ChangeCssClass("alert-danger");
            MainAlert.ChangeVisible(true);

            StateHasChanged();
        });
    }

    public void SubscribeToEditItemClick()
    {
        MessagingCenter.Subscribe<Button, string>(this, "BikeList_editIemClick", (sender, value) =>
        {
            // Do actions against the value
            // If the value is updating the component make sure to call StateHasChanged
            message = $"You are editing {value}";
            MainAlert.ChangeCssClass("alert-primary");
            MainAlert.ChangeVisible(true);

            JSRuntime.InvokeVoidAsync("bootstrapNS.ToggleModal", "#EditBikeModal", "show");
            SubscribeToModalClosing();
            StateHasChanged();
        });
    }
    protected override async Task OnInitializedAsync()
    {

        //url = Configuration.GetSection("BikeShopWS").GetValue("baseUrl", "");
        try
        {
            var jsonResponse = await RestClient.GetStringAsync("/bike");
            EntityBikes = JsonUtils.DeserializeMongoEntityBikeList(jsonResponse);
            SubscribeToEditItemClick();
            SubscribeToDeleteItemClick();
        }
        catch (Exception ex)
        {
            responseContent = ex.Message + " " + ex.InnerException + ex.StackTrace;
        }

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        await JSRuntime.InvokeVoidAsync("bootstrapNS.JSDataTable", "#BikeList", new object[] { });
    }
}
