@using BikeDistributor.Domain.Models;
@using BikeDistributor.Domain.Entities;
@using BikeDistributor.Infrastructure.core;
@using BikeShop.BlazorComponents.Components;

@inject HttpClient RestClient;
@inject IJSRuntime JSRuntime;

<span class="badge bg-success">Admin</span><span class="badge bg-secondary">Bikes</span>
<div>

    <!--ecce homo <span>@url</span>-->@*<span>@Configuration.GetSection("BikeShopWS").GetValue("baseUrl", "")</span>*@
    <span>@responseContent</span>
</div>

@if (EntityBikes == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div>
    <HtmlTable Items="EntityBikes" Context="EntityBike">
        <HeaderTemplate>
            <th>Model</th>
            <th>Brand</th>
            <th>Type</th>
            <th>Tot. Price</th>
        </HeaderTemplate>
        <RowTemplate>
            <td>@EntityBike.Bike.Model</td>
            <td>@EntityBike.Bike.Brand</td>
            <td>@EntityBike.Bike.isStandard</td>
            <td>@EntityBike.TotalPrice</td>
        </RowTemplate>
    </HtmlTable>
</div>
}
@code {
    private List<MongoEntityBike> EntityBikes;
    //private string url;
    private string responseContent;

    protected override async Task OnInitializedAsync()
    {


        //url = Configuration.GetSection("BikeShopWS").GetValue("baseUrl", "");
        try
        {
            var jsonResponse = await RestClient.GetStringAsync("/bike");
            EntityBikes = JsonUtils.DeserializeMongoEntityBikeList(jsonResponse);
            responseContent = "items fetched: " + EntityBikes.Count.ToString();
            //responseContent += "<br />" + jsonResponse;

            //EntityBikes = await RestClient.GetFromJsonAsync<List<MongoEntityBike>>("/bike");

        }
        catch (Exception ex)
        {
            responseContent = ex.Message + " " + ex.InnerException + ex.StackTrace;
        }

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    //await JSRuntime.InvokeVoidAsync("bootstrapNS.SayHello", "Marcello");//works
        //    //await JSRuntime.InvokeVoidAsync("bootstrapNS.MakeRichTables");
        //await JSRuntime.InvokeAsync<object>("initializeDataTable", ".table");

        //}
        //if (firstRender)
        //{
        //var jQuery = await JSRuntime.InvokeAsync<IJSObjectReference>("$", "table");
        //await jQuery.InvokeVoidAsync("DataTable");
        //}
        //await JSRuntime.InvokeAsync<object>("initializeDataTable", ".table");
        await JSRuntime.InvokeVoidAsync("bootstrapNS.JSDataTable", ".table", new object[] { });
    }
}
